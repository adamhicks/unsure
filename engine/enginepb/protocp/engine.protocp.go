// Code generated by protocp; DO NOT EDIT.
package protocp

import (
	"github.com/corverroos/unsure/engine"
	"github.com/corverroos/unsure/engine/enginepb"
)

func CollectPlayerToProto(namedInput *engine.CollectPlayer) (*enginepb.CollectPlayer, error) {
	var namedOutput *enginepb.CollectPlayer

	var transformAndConvert engine.CollectPlayer
	if namedInput != nil {
		transformAndConvert = *namedInput
	}
	var transformAndConvert1 enginepb.CollectPlayer
	transformAndConvert1.Name = transformAndConvert.Name
	transformAndConvert1.Part = (int64)(transformAndConvert.Part)
	transformAndConvert1.Rank = (int64)(transformAndConvert.Rank)

	var transformAndConvert2 *enginepb.CollectPlayer
	transformAndConvert2 = &transformAndConvert1

	namedOutput = transformAndConvert2

	return namedOutput, nil
}

func CollectPlayerFromProto(namedInput *enginepb.CollectPlayer) (*engine.CollectPlayer, error) {
	var namedOutput *engine.CollectPlayer

	var transformAndConvert enginepb.CollectPlayer
	if namedInput != nil {
		transformAndConvert = *namedInput
	}
	var transformAndConvert1 engine.CollectPlayer
	transformAndConvert1.Name = transformAndConvert.Name
	transformAndConvert1.Part = (int)(transformAndConvert.Part)
	transformAndConvert1.Rank = (int)(transformAndConvert.Rank)

	var transformAndConvert2 *engine.CollectPlayer
	transformAndConvert2 = &transformAndConvert1

	namedOutput = transformAndConvert2

	return namedOutput, nil
}

func CollectRoundResToProto(namedInput *engine.CollectRoundRes) (*enginepb.CollectRoundRes, error) {
	var namedOutput *enginepb.CollectRoundRes

	var transformAndConvert engine.CollectRoundRes
	if namedInput != nil {
		transformAndConvert = *namedInput
	}
	var transformAndConvert1 enginepb.CollectRoundRes
	for i := range transformAndConvert.Players {
		var tmpOutput *enginepb.CollectPlayer
		var transformAndConvert2 enginepb.CollectPlayer
		transformAndConvert2.Name = transformAndConvert.Players[i].Name
		transformAndConvert2.Part = (int64)(transformAndConvert.Players[i].Part)
		transformAndConvert2.Rank = (int64)(transformAndConvert.Players[i].Rank)

		var transformAndConvert3 *enginepb.CollectPlayer
		transformAndConvert3 = &transformAndConvert2

		tmpOutput = transformAndConvert3

		transformAndConvert1.Players = append(transformAndConvert1.Players, tmpOutput)
	}

	var transformAndConvert2 *enginepb.CollectRoundRes
	transformAndConvert2 = &transformAndConvert1

	namedOutput = transformAndConvert2

	return namedOutput, nil
}

func CollectRoundResFromProto(namedInput *enginepb.CollectRoundRes) (*engine.CollectRoundRes, error) {
	var namedOutput *engine.CollectRoundRes

	var transformAndConvert enginepb.CollectRoundRes
	if namedInput != nil {
		transformAndConvert = *namedInput
	}
	var transformAndConvert1 engine.CollectRoundRes
	for i := range transformAndConvert.Players {
		var tmpOutput engine.CollectPlayer
		var transformAndConvert2 enginepb.CollectPlayer
		if transformAndConvert.Players[i] != nil {
			transformAndConvert2 = *transformAndConvert.Players[i]
		}
		var transformAndConvert3 engine.CollectPlayer
		transformAndConvert3.Name = transformAndConvert2.Name
		transformAndConvert3.Part = (int)(transformAndConvert2.Part)
		transformAndConvert3.Rank = (int)(transformAndConvert2.Rank)

		tmpOutput = transformAndConvert3

		transformAndConvert1.Players = append(transformAndConvert1.Players, tmpOutput)
	}

	var transformAndConvert2 *engine.CollectRoundRes
	transformAndConvert2 = &transformAndConvert1

	namedOutput = transformAndConvert2

	return namedOutput, nil
}
